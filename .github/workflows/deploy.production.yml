name: CI-CD (Production)

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-to-droplet
  cancel-in-progress: true

jobs:
  deploy:
    environment: production

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ vars.FRONTEND_DIR }}/package-lock.json

      - name: Build UI
        working-directory: ${{ vars.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      - name: Upload backend code via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.URL }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ${{ vars.BACKEND_DIR }}/
          target: ${{ vars.REMOTE_APP_DIR }}
          rm: true

      - name: Upload frontend code via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.URL }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ${{ vars.FRONTEND_DIR }}/dist
          target: ${{ vars.REMOTE_APP_DIR }}
          rm: false # Otherwise we wipe out the backend code

      - name: Bootstrap on droplet
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ vars.URL }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd ${{ vars.REMOTE_APP_DIR }}/backend/

            # Install uv (fast installer from Astral) if it isn't there
            if ! command -v uv >/dev/null 2>&1; then
              curl -LsSf https://astral.sh/uv/install.sh | sh
              export PATH="$HOME/.local/bin:$PATH"
            fi

            # Sync dependencies directly from pyproject.toml
            uv sync

            # Inject environment secrets
            sudo mkdir -p /etc/tenantfirstaid
            sudo chmod 750 /etc/tenantfirstaid
            sudo chown root:root /etc/tenantfirstaid
            cat > /etc/tenantfirstaid/env <<EOF
            ENV=${{ vars.ENV }}
            FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}
            DB_HOST=${{secrets.DB_HOST}}
            DB_PASSWORD=${{secrets.DB_PASSWORD}}
            DB_PORT=${{vars.DB_PORT}}
            DB_USER=default
            MAIL_PORT=${{vars.MAIL_PORT}}
            MAIL_SERVER=${{vars.MAIL_SERVER}}
            APP_PASSWORD=${{secrets.APP_PASSWORD}}
            SENDER_EMAIL=${{vars.SENDER_EMAIL}}
            RECIPIENT_EMAIL=${{vars.RECIPIENT_EMAIL}}
            GOOGLE_CLOUD_PROJECT=${{vars.GOOGLE_CLOUD_PROJECT}}
            GOOGLE_CLOUD_LOCATION=${{vars.GOOGLE_CLOUD_LOCATION}}
            VERTEX_AI_DATASTORE=${{vars.VERTEX_AI_DATASTORE}}
            SHOW_MODEL_THINKING=false
            GOOGLE_APPLICATION_CREDENTIALS=/etc/tenantfirstaid/google-service-account.json
            EOF
            chmod 640 /etc/tenantfirstaid/env

            cat > /etc/tenantfirstaid/google-service-account.json <<EOF
            ${{ secrets.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS}}
            EOF
            chmod 640 /etc/tenantfirstaid/google-service-account.json

            # Ownership, restart, reload
            sudo chown -R $USER:www-data ${{ vars.REMOTE_APP_DIR }}
            sudo systemctl restart ${{ vars.SERVICE_NAME }}
            sudo systemctl reload nginx
